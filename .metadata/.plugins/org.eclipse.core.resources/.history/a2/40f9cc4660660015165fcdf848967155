package decisionTree;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.List;

import Utils.util;
import constants.Params;
import measure.Measure;
import measure.MeasureFactory;
import measure.MeasureType;
import treenode.TreeNode;

public class DecisionTree {
	private TreeNode root;
	private static final int DIVIDE_COUNT = 10;
	
	public void buildTree(String filename){
		Measure measure = MeasureFactory.getMeasure(MeasureType.PLUS_MEASURE);
		List<String> lines = util.readfile(filename);
		double[] maxMin = getMaxMin(lines);
		
	}
	
	private double[] getMaxMin(List<String> lines, int colIndex){
		double[] results = new double[2]; // 0: max, 1: min
		results[0] = 0;
		results[1] = Integer.MAX_VALUE;
	    for(String line : lines) {
	       String[] cols = line.split(",");
	       double bidMin = Double.parseDouble(cols[2]);
	       double bidMax = Double.parseDouble(cols[3]);
	       double bidAvg = Double.parseDouble(cols[4]);
	       double spreadAvg = Double.parseDouble(cols[5]);
	       
	       results[0] = Math.max(results[0], bidMin);
	       results[1] = Math.min(results[1], bidMin);
	       results[2] = Math.max(results[2], bidMax);
	       results[3] = Math.min(results[3], bidMax);
	       results[4] = Math.max(results[4], bidAvg);
	       results[5] = Math.min(results[5], bidAvg);
	       results[6] = Math.max(results[6], spreadAvg);
	       results[7] = Math.min(results[7], spreadAvg);
	    }
		return results;
	}
}
